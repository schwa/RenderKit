#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

enum Bindings {
  Bindings_VerticesBuffer = 0,
  Bindings_TransformsBuffer = 1,
};

struct Transforms {
  simd_float4x4 modelView;
  simd_float3x3 modelNormal;
  simd_float4x4 projection;
};

struct Vertex {
  float3 position [[attribute(0)]];
  float3 normal [[attribute(1)]];
  float2 textureCoordinate [[attribute(2)]];
};

struct Fragment {
  float4 position [[position]];
  float2 textureCoordinate;
};

vertex Fragment ShaderToy_VertexShader(Vertex in [[stage_in]],
                                       constant Transforms &transforms
                                       [[buffer(Bindings_TransformsBuffer)]]) {
  Fragment out;
  out.position =
      transforms.projection * transforms.modelView * float4(in.position, 1.0);
  out.textureCoordinate = in.textureCoordinate;
  return out;
}

float plot(float2 st) { return smoothstep(0.02, 0.0, abs(st.y - st.x)); }

fragment float4 ShaderToy_FragmentShader(Fragment in [[stage_in]])
{
  float2 st = in.textureCoordinate;
  float y = st.x;
  float3 color = float3(y);
  float pct = plot(st);
  color = (1.0 - pct) * color + pct * float3(0.0, 1.0, 0.0);
  return float4(color, 1.0);
}
